using PiSync.Core.Model;
using System;
using System.Drawing;
using System.Net.Http.Json;
using System.Windows.Forms;

namespace PiSync.Dashboard
{
    public partial class DoorCardControl : UserControl
    {
        private RoomModel roomData;

        // Labels to display door info
        private Label lblName = new Label();
        private Label lblStatus = new Label();

        public DoorCardControl()
        {
            // Ensure InitializeComponent is called to load the default designer components
            InitializeComponent();
            this.Click += DoorCardControl_Click;
        }

        public void SetData(RoomModel room)
        {
            roomData = room;

            // Update UI based on door state
            lblName.Text = room.name;
            lblStatus.Text = room.isOpen ? "Open" : "Closed";
            lblStatus.ForeColor = room.isOpen ? Color.Red : Color.Green;
        }

        private void DoorCardControl_Click(object sender, EventArgs e)
        {
            // Toggle door status
            roomData.isOpen = !roomData.isOpen;
            SetData(roomData); // Update the UI after toggling

            // Optionally, send an update to the API to change the door's state
            ToggleDoorStateAsync(roomData);
        }

        private async void ToggleDoorStateAsync(RoomModel room)
        {
            try
            {
                var response = await new HttpClient().PutAsJsonAsync($"doors/{room.id}/toggle", room);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Door {room.name} toggled successfully.");
                }
                else
                {
                    MessageBox.Show($"Failed to toggle door {room.name}.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error toggling door state: {ex.Message}");
            }
        }

        // The InitializeComponent() method should not be written manually here.
        // It is auto-generated by the designer and called inside the constructor.

        // Here, we customize the control layout.
        protected override void OnLayout(LayoutEventArgs e)
        {
            base.OnLayout(e);

            // Customize the layout of controls inside the user control
            lblName.Dock = DockStyle.Top;
            lblName.TextAlign = ContentAlignment.MiddleCenter;
            lblStatus.Dock = DockStyle.Top;
            lblStatus.TextAlign = ContentAlignment.MiddleCenter;
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            // Adjust control size as needed when resized
            this.Size = new Size(200, 100);
        }
    }
}
